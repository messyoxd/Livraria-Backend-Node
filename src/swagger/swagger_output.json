{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Library API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Test API"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "apiKeyAuth": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "JWT authentication"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/book-rents/rent": {
      "post": {
        "tags": ["BookRent"],
        "description": "Rent a book",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Book Rent information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookRent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book successfully rented!"
          },
          "500":{
            "description": "An Error ocurred at the server when renting a book!"
          }
        }
      }
    },
    "/book-rents/rent/": {
      "get": {
        "tags": ["BookRent"],
        "description": "Get all book rents",
        "security": [{"apiKeyAuth":[]}],
        "responses": {
          "200": {
            "description": "Book Rents successfully found!",
            "schema": {
              "$ref": "#/definitions/BookRentList"
            }
          }
        }
      }
    },
    "/book-rents/rent/{id}": {
      "get": {
        "tags": ["BookRent"],
        "description": "Get a book rent by id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book rent successfully found!"
          },
          "422":{
            "description": "Book Rent not found!"
          }
        }
      },
      "patch": {
        "tags": ["BookRent"],
        "security": [{"apiKeyAuth":[]}],
        "description": "Return book",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully returned!"
          },
          "422":{
            "description": "Book Rent not found!"
          }
        }
      },
      "delete": {
        "tags": ["BookRent"],
        "security": [{"apiKeyAuth":[]}],
        "description": "Delete book rent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book Rents successfully found!"
          },
          "422":{
            "description": "Book Rent not found!"
          },
          "500":{
            "description": "An Error ocurred at the server when deleting book rent!"
          }
        }
      }
    },
    "/book-rents/rent/user/{userId}": {
      "get": {
        "tags": ["BookRent"],
        "security": [{"apiKeyAuth":[]}],
        "description": "Get book rents by user id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book Rents successfully found!"
          },
          "422":{
            "description": "User not found!"
          }
        }
      }
    },
    "/book-rents/rent/book/{bookId}": {
      "get": {
        "tags": ["BookRent"],
        "security": [{"apiKeyAuth":[]}],
        "description": "Get book rents by book id",
        "parameters": [
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book Rents successfully found!"
          },
          "422":{
            "description": "Book not found!"
          }
        }
      }
    },
    "/book-rents/rent/user/{userId}/book/{bookId}": {
      "get": {
        "tags": ["BookRent"],
        "description": "Get book rent by user and book id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "bookId",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book Rent successfully found!"
          },
          "422":{
            "description": "User or Book not found!"
          }
        }
      }
    },
    "/books/create": {
      "post": {
        "tags": ["Book"],
        "description": "Create a book",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Book information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book successfully created!"
          },
          "400":{
            "description": "Field Errors"
          },
          "422":{
            "description": "Publisher not found!"
          },
          "500":{
            "description": "An Error ocurred at the server when creating a new Book!"
          }
        }
      }
    },
    "/books/{id}": {
      "get": {
        "tags": ["Book"],
        "description": "Get book by id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully found!"
          },
          "422":{
            "description": "Book not found!"
          }
        }
      }
    },
    "/books/": {
      "get": {
        "tags": ["Book"],
        "description": "Get all books",
        "security": [{"apiKeyAuth":[]}],
        "responses": {
          "200": {
            "description": "Book successfully found!"
          }
        }
      }
    },
    "/books/edit/{id}": {
      "patch": {
        "tags": ["Book"],
        "description": "Edit book",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Book information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditBook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully found!"
          },
          "400":
            {
            "description": "Field Errors"
          },
          "422":
            {
              "description": "Book or Publisher not found!"
            },
          "500":{
            "description": "An Error ocurred at the server when updating book!"
          }
        }
      }
    },
    "/books/delete/{id}": {
      "delete": {
        "tags": ["Book"],
        "description": "Delete book by id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Book successfully deleted!"
          },
          "422":{
            "description": "Book not found!"
          },
          "500":{
            "description": "An Error ocurred at the server when deleting book!"
          }
        }
      }
    },
    "/publishers/create": {
      "post": {
        "tags": ["Publisher"],
        "description": "Create publisher",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Publisher information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Publisher successfully created!"
          },
          "400":{
            "description": "Field Errors"
          }
        }
      }
    },
    "/publishers/{id}": {
      "get": {
        "tags": ["Publisher"],
        "description": "Get Publishe by Id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Publisher successfully found!"
          },
          "422":{
            "description": "Publisher not found!"
          }
        }
      }
    },
    "/publishers/": {
      "get": {
        "tags": ["Publisher"],
        "description": "Get all publishers",
        "security": [{"apiKeyAuth":[]}],
        "responses": {
          "200": {
            "description": "Publishers successfully found!"
          }
        }
      }
    },
    "/publishers/edit/{id}": {
      "patch": {
        "tags": ["Publisher"],
        "description": "Edit publisher",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Publisher information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditPublisher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Publisher successfully found!"
          },
          "400":
            {
            "description": "Field Errors"
          },
          "422":[
            {
              "description": "Publisher not found!"
            }
          ],
          "500":{
            "description": "An Error ocurred at the server when updating publisher!"
          }
        }
      }
    },
    "/publishers/delete/{id}": {
      "delete": {
        "tags": ["Publisher"],
        "description": "Delete publisher by id",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Publisher successfully deleted!"
          },
          "422":{
            "description": "Publisher not found!"
          },
          "500":{
            "description": "An Error ocurred at the server when deleting publisher!"
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": ["User"],
        "description": "Register a user",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User successfully created!"
          },
          "400":{
            "description": "Field Errors"
          },
          "500":{
            "description": "Internal error when creating User"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["User"],
        "description": "Login",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in!"
          },
          "400":{
            "description": "Field Errors"
          },
          "422":{
            "description": "Invalid password!"
          }
        }
      }
    },
    "/users/check": {
      "get": {
        "tags": ["User"],
        "description": "Get user by JWT",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User successfully found!"
          },
          "401":{
            "description": "Unauthorized!"
          },
          "422":{
            "description": "User not found!"
          }
        }
      }
    },
    "/users/edit/": {
      "patch": {
        "tags": ["User"],
        "description": "Edit user",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "User information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully edited!"
          },
          "400":{
            "description": "Field Errors"
          },
          "422": {
            "description": "Error with User!"
          }
        }
      }
    },
    "/users/delete/:id": {
      "delete": {
        "tags": ["User"],
        "description": "Delete user",
        "security": [{"apiKeyAuth":[]}],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully deleted!"
          },
          "400":{
            "description": "Field Errors"
          },
          "422": {
            "description": "Error with User!"
          },
          "500":{
            "description": "There was an error at the server!"
          }
        }
      }
    }
  },
  "definitions": {
    "BookRent":{
      "type": "object",
      "required": [
        "userId",
        "bookId",
        "rentStatus"
      ],
      "properties": {
        "userId":{
          "type": "number",
          "minimum": 1
        },
        "bookId":{
          "type": "number",
          "minimum": 1
        },
        "rentStatus":{
          "type": "number",
          "minimum": 1,
          "maximum": 4
        }
      }
    },
    "Book":{
      "type": "object",
      "required": [
        "publisherId",
        "author",
        "title",
        "publishedDate",
        "availableStock"
      ],
      "properties": {
        "publisherId":{
          "type": "number",
          "minimum": 1
        },
        "author":{
          "type": "string"
        },
        "title":{
          "type": "string"
        },
        "publishedDate":{
          "type": "string",
          "format": "date-time"
        },
        "availableStock":{
          "type": "number",
          "minimum": 0
        }
      }
    },
    "EditBook":{
      "type": "object",
      "properties": {
        "publisherId":{
          "type": "number",
          "minimum": 1
        },
        "author":{
          "type": "string"
        },
        "title":{
          "type": "string"
        },
        "publishedDate":{
          "type": "string",
          "format": "date-time"
        },
        "availableStock":{
          "type": "number",
          "minimum": 0
        }
      }
    },
    "Publisher":{
      "type": "object",
      "required": [
        "name",
        "city"
      ],
      "properties": {
        "name":{
          "type": "string",
          "minimum": 5
        },
        "city":{
          "type": "string",
          "minimum": 5
        }
      }
    },
    "EditPublisher":{
      "type": "object",
      "properties": {
        "name":{
          "type": "string",
          "minimum": 5
        },
        "city":{
          "type": "string",
          "minimum": 5
        }
      }
    },
    "User":{
      "type": "object",
      "required": [
        "name",
        "email",
        "phone",
        "password",
        "confirmpassword"
      ],
      "properties": {
        "name":{
          "type": "string",
          "minimum": 5
        },
        "email":{
          "type": "string",
          "minimum": 5,
          "format": "email"
        },
        "phone":{
          "type": "string",
          "minimum": 5
        },
        "password":{
          "type": "string",
          "minimum": 5,
          "format": "password"
        },
        "confirmpassword":{
          "type": "string",
          "minimum": 5,
          "format": "password"
        }
      }
    },
    "UserLogin":{
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email":{
          "type": "string",
          "minimum": 5,
          "format": "email"
        },
        "password":{
          "type": "string",
          "minimum": 5,
          "format": "password"
        }
      }
    },
    "EditUser":{
      "type": "object",
      "properties": {
        "name":{
          "type": "string",
          "minimum": 5
        },
        "email":{
          "type": "string",
          "minimum": 5,
          "format": "email"
        },
        "phone":{
          "type": "string",
          "minimum": 5
        },
        "password":{
          "type": "string",
          "minimum": 5,
          "format": "password"
        },
        "confirmpassword":{
          "type": "string",
          "minimum": 5,
          "format": "password"
        }
      }
    }
  }
}